@inject IDbContextFactory<RybaContext> RybaContextFactory
@inject NavigationManager Nav
@inject FluentLocalizationService Tr
@code {
    [CascadingParameter]
    protected Task<AuthenticationState> AuthStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        var user = authState.User;
        if (authState?.User.Identity?.IsAuthenticated ?? false)
        {
            var dbCtx = await RybaContextFactory.CreateDbContextAsync();
            var dbUser = await dbCtx.GetOrCreateUserAsync(user);
            await UpdateLanguage(dbUser.Language);
        }
        await base.OnInitializedAsync();
    }

    protected async Task UpdateLanguage(string incoming)
    {
        var lang = incoming;
        if (Tr.AvailableLanguages.Select(x => x.Name).All(x => x != incoming))
            lang = FluentLocalizationService.DefaultLanguage;

        var authState = await AuthStateTask;
        var user = authState.User;
        if (authState?.User.Identity?.IsAuthenticated ?? false)
        {
            var dbCtx = await RybaContextFactory.CreateDbContextAsync();
            var dbUser = await dbCtx.GetOrCreateUserAsync(user);
            dbUser.Language = lang;
            dbCtx.Update(dbUser);
            await dbCtx.SaveChangesAsync();
        }
        if (CultureInfo.CurrentCulture.Name != lang)
        {
            var uri = new Uri(Nav.Uri)
                .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
            var cultureEscaped = Uri.EscapeDataString(lang);
            var uriEscaped = Uri.EscapeDataString(uri);

            Nav.NavigateTo(
                $"Language/Set?culture={cultureEscaped}&redirectUri={uriEscaped}",
                forceLoad: true);
        }
    }
 }